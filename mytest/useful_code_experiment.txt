void interpretert::execute_printf() const
{
  codet src = PC->code;
  if (!src.has_operands()) return;

  std::string first_arg = "";

  exprt::operandst::const_iterator it=src.operands().begin();
  const exprt &expr = *it;

  if (expr.id() == ID_address_of && is_c_pointer_of_char(expr.type()))
  {
    if (expr.has_operands() && 
      expr.operands().size() == 1 && 
      expr.op0().id() == ID_index && 
      expr.op0().operands().size() ==2)
    {
      const index_exprt index_expr = static_cast<const index_exprt &>(expr.op0()); 
      const exprt arr_expr = index_expr.op0(); //or expr.op0().op0()
      if (arr_expr.id() == ID_symbol && arr_expr.type().id() == ID_array)
      {
        // way 1
        const irep_idt &identifier = arr_expr.get(ID_identifier);
        exprt symbol_expr(ID_symbol, arr_expr.type());
        symbol_expr.set(ID_identifier, identifier);
        std::vector<mp_integer> tmp;
        evaluate(symbol_expr, tmp);
        first_arg = read_string(tmp);

      
        // way 2
        first_arg = "";
        unsigned size = get_size(arr_expr.type());
        mp_integer address = evaluate_address(index_expr);
        std::vector<mp_integer> dest(size);
        read(address, dest);
        first_arg = read_string(dest);

        // way3 - awkful but also works (my initial ways btw)
        first_arg = "";
        expr2ct expr2c(ns);
        expr2c.get_shorthands(expr);
        std::string var_name = expr2c.convert(expr);

        const symbolt &symbol  = get_variable_symbol(var_name);
        if (&symbol != &null_symbol)
        {
          exprt symbol_expr(ID_symbol, symbol.type);
          symbol_expr.set(ID_identifier, symbol.name);
          std::vector<mp_integer> tmp;
          evaluate(symbol_expr, tmp);
          first_arg = read_string(tmp);
        }
      }
    }
  }

======================================================================

void interpretert::execute_printf() const

  if (expr.id() == ID_address_of)
  {
    int s = expr.get_int(ID_size);

    // The following works but awkful!
    expr2ct expr2c(ns);
    expr2c.get_shorthands(expr);
    std::string var_name = expr2c.convert(expr);

    const symbolt &symbol  = get_variable_symbol(var_name);
    if (&symbol != &null_symbol)
    {
      exprt symbol_expr(ID_symbol, symbol.type);
      symbol_expr.set(ID_identifier, symbol.name);
      std::vector<mp_integer> tmp;
      evaluate(symbol_expr, tmp);
      first_arg = read_string(tmp);
    }

    mp_integer addr = evaluate_address(expr.op0());
    unsigned addr_u = integer2long(addr);

    std::cout << "address : " << addr_u << std::endl;
    std::cout << std::endl << "my exp:" << expr << std::endl;

    std::string s1 = expr.to_string();

    const exprt e2 = expr.op0().op0();
    std::cout << std::endl << "my e2:" << e2 << std::endl;


    std::cout << std::endl << "my e2.type():" << e2.type() << std::endl; //almost ok

    std::cout << std::endl << "my e2.type().subtype:" << e2.type().subtype() << std::endl; //almost ok
    
    if (e2.id() == ID_symbol)
    {
      const irep_idt &identifier=e2.get(ID_identifier);
      std::cout << std::endl << "JT identifier: " << identifier << std::endl; //almost ok

      std::cout << std::endl << "JT: my symbol " << std::endl; //almost ok
    }

    if (e2.type().id() == ID_array)
    {
      std::cout << std::endl << "my e2.type() = array" << std::endl; //almost ok
    }

    const typet t = expr.type();
    std::cout << t;
    
    unsigned size = get_size(t.subtype());
    std::cout << "size:" << size << std::endl;

    const typet st = expr.type().subtype();
    std::cout << "sub-type:" << st << std::endl;

    if (t.id() == ID_pointer)
    {
      std::cout << std::endl << "jt: POINTER" << std::endl;
      const irep_idt id = t.subtype().get(ID_C_c_type);
      if (id == ID_char || id == ID_signed_char || id == ID_unsigned_char)
      {
        std::cout << std::endl << "POINTER to char" << std::endl;
      }

      // how would I know the size?
      std::vector<mp_integer> t1;
      //evaluate(expr.op1(), t1);
      if (t1.size() == 1)
      {
        unsigned size2 = t1[0].to_ulong();
        std::cout << "size2:" << size2 << std::endl;
      }

    }

 
